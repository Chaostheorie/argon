"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const rpc_error_1 = require("./rpc-error");
class RpcClient {
    constructor(options) {
        this.options = options;
        this.client = axios_1.default;
    }
    /**
     * Make JSON RPC Batch Request of the same method
     * @throws {AxiosError | RpcError} http/rpc error
     */
    makeBatchRequest(requests) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.post(this.options.url, requests, this.options);
            // TODO: Handle Batch Request errors !
            // if (response.data.error) {
            //   throw new RpcError(response.data.error);
            // }
            return response;
        });
    }
    /**
     * Make JSON RPC Request
     * @throws {AxiosError | RpcError} http/rpc error
     */
    makeRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.post(this.options.url, request, this.options);
            if (response.data.error) {
                throw new rpc_error_1.RpcError(response.data.error);
            }
            return response;
        });
    }
}
exports.RpcClient = RpcClient;
//# sourceMappingURL=rpc-client.js.map